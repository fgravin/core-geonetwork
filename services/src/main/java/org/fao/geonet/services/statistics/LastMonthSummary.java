package org.fao.geonet.services.statistics;

import jeeves.server.ServiceConfig;
import jeeves.server.context.ServiceContext;
import org.fao.geonet.domain.ISODate;
import org.fao.geonet.domain.Pair;
import org.fao.geonet.domain.statistic.SearchRequest;
import org.fao.geonet.domain.statistic.SearchRequest_;
import org.fao.geonet.repository.statistic.PathSpec;
import org.fao.geonet.repository.statistic.SearchRequestRepository;
import org.fao.geonet.utils.Log;
import org.fao.geonet.utils.Xml;
import org.fao.geonet.constants.Geonet;
import org.fao.geonet.services.NotInReadOnlyModeService;
import org.jdom.Element;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specifications;

import javax.persistence.criteria.Path;
import javax.persistence.criteria.Root;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.fao.geonet.repository.specification.SearchRequestSpecs.*;
import static org.springframework.data.jpa.domain.Specifications.where;

/**
 * Service to get the db-stored requests information summary during last month
 * @author nicolas Ribot
 *
 */
public class LastMonthSummary extends NotInReadOnlyModeService {
	//--------------------------------------------------------------------------
	//---
	//--- Init
	//---
	//--------------------------------------------------------------------------

	public void init(String appPath, ServiceConfig params) throws Exception	{
        super.init(appPath, params);
	}

	//--------------------------------------------------------------------------
	//---
	//--- Service
	//---
	//--------------------------------------------------------------------------
    @Override
	public Element serviceSpecificExec(Element params, ServiceContext context) throws Exception {
        // computes date range
		Calendar monthAgo = new GregorianCalendar();
		monthAgo.add(Calendar.MONTH, -1);
		Calendar now = Calendar.getInstance();

        long numberOfDay = TimeUnit.SECONDS.convert(now.getTimeInMillis()- monthAgo.getTimeInMillis(), TimeUnit.MILLISECONDS) / (24*3600);
		//System.out.println("month ago: " + monthAgo + " number of days: " + numberOfDay);

        final SearchRequestRepository searchRequestRepository = context.getBean(SearchRequestRepository.class);

        final ISODate monthAgoIsoDate = new ISODate(monthAgo.getTimeInMillis(), false);

        Specifications<SearchRequest> lastMonthSpec = where(isMoreRecentThanOrEqualTo(monthAgoIsoDate));
        final Specifications<SearchRequest> isNotAutogenerated = lastMonthSpec.and(isAutogenerated(false));
        final Specifications<SearchRequest> isAutogenerated = lastMonthSpec.and(isAutogenerated(true));

        int totalCount = (int) searchRequestRepository.count(isNotAutogenerated);
        int noHit = (int) searchRequestRepository.count(isAutogenerated);

        Element noHitsElement = new Element("lastMonthSummary")
                .addContent(new Element("record")
                    .addContent(new Element("nohit").setText(""+noHit))
                    .addContent(new Element("totalcount").setText(""+totalCount))
                );


        if(Log.isDebugEnabled(Geonet.SEARCH_LOGGER))
            Log.debug(Geonet.SEARCH_LOGGER, "count, number of days in this month: " + totalCount + ", " + numberOfDay);
		
		Element meanSearchElement = new Element("meanSearchLastMonth").setText("" + Math.round((double)totalCount/(double)numberOfDay));

		int autogeneratedCount = (int) searchRequestRepository.count(lastMonthSpec.and(isAutogenerated(true)));

		Element autogeneratedElement = new Element("autogenerated").setText(autogeneratedCount+"");

		// simple/advanced searches

        final List<Pair<Boolean, Integer>> hitSummary =
                searchRequestRepository.getHitSummary(lastMonthSpec, new PathSpec<SearchRequest, Boolean>() {
            @Override
            public Path<Boolean> getPath(Root<SearchRequest> root) {
                return root.get(SearchRequest_.simple);
            }
        }, org.springframework.data.domain.Sort.Direction.DESC);

        // fixme: heavy code to deal with one or two results in the SQL
		Element advancedSearchElement = new Element("advanced").setText("0");
		Element simpleSearchElement = new Element("simple").setText("0");

        for (Pair<Boolean, Integer> summary : hitSummary) {
            if (summary.one()) {
                simpleSearchElement.setText("" + summary.two());
            } else {
                advancedSearchElement.setText("" + summary.two());
            }
        }

        final List<Pair<String, Integer>> metadataTypeSummary = searchRequestRepository.getHitSummary(isNotAutogenerated ,
                new PathSpec<SearchRequest, String>() {
            @Override
            public Path<String> getPath(Root<SearchRequest> root) {
                return root.get(SearchRequest_.metadataType);
            }
        }, Sort.Direction.DESC);

        // search by MD type (service MD, data MD, geodata, all)
		Element mdTypeElement = new Element("mdType");
        for (Pair<String, Integer> summary : metadataTypeSummary) {
            mdTypeElement.addContent(
                    new Element("record")
                            .addContent(new Element("type").setText(summary.one()))
                            .addContent(new Element("typecount").setText("" + summary.two()))
            );

        }

		noHitsElement.addContent(autogeneratedElement);
		noHitsElement.addContent(meanSearchElement);
		noHitsElement.addContent(advancedSearchElement);
		noHitsElement.addContent(simpleSearchElement);
		noHitsElement.addContent(mdTypeElement);
		
		System.out.println("response: " + Xml.getString(noHitsElement));

		return noHitsElement;
	}
}
