#Core security properties

logout.success.url=/index.html
passwordSalt=secret-hash-salt=

# LDAP security properties
ldap.base.provider.url=ldap://${ldap.host}:${ldap.port}
ldap.base.dn=${ldap.base}
ldap.security.principal=${ldap.binddn}
ldap.security.credentials=${ldap.bindpw}

ldap.base.search.base=${ldap.base.search.base}
ldap.base.dn.pattern=${ldap.base.dn.pattern}
#ldap.base.dn.pattern=mail={0},${ldap.base.search.base}


# Define if groups and profile information are imported from LDAP. If not, local database is used.
# When a new user connect first, the default profile is assigned. A user administrator can update
# privilege information.
ldap.privilege.import=true

ldap.privilege.create.nonexisting.groups=false

# Define the way to extract profiles and privileges from the LDAP
# 1. Define one attribute for the profile and one for groups in config-security-overrides.properties

# 2. Define one attribute for the privilege and define a custom pattern (use LDAPUserDetailsContextMapperWithPattern in config-security.xml).
ldap.privilege.pattern=${ldap.privilege.pattern}
ldap.privilege.pattern.idx.profil=${ldap.privilege.pattern.idx.profil}
ldap.privilege.pattern.idx.group=${ldap.privilege.pattern.idx.group}



# Run LDAP sync every 15 min
ldap.sync.cron=0 30 23 * * ?
ldap.sync.startDelay=60000
ldap.sync.user.search.base=${ldap.base.search.base}
ldap.sync.user.search.filter=(&(objectClass=*)(mail=*@*)(uid={0})(givenName=*))
ldap.sync.user.search.attribute=uid
ldap.sync.group.search.base=
ldap.sync.group.search.filter=
ldap.sync.group.search.attribute=
ldap.sync.group.search.pattern=

# CAS properties
cas.baseURL=${cas.baseURL}
cas.ticket.validator.url=${cas.baseURL}
cas.login.url=${cas.baseURL}/login
cas.logout.url=${cas.baseURL}/logout?url=${geonetwork.https.url}/

# either the hardcoded url to the server
# or if has the form @blah@ it will be replaced with
# the server details from the server configuration
geonetwork.https.url=@to_be_replaced_at_runtime@

